@{
    ViewData["Title"] = "Product Page";
}
@model List<Revenue_System.Models.ProductModel>

<style>
    /* CSS cho overlay và form */
    .alert-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }

    .alert-form {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 5px;
        z-index: 1000;
    }

    .spinner-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .spinner {
        border: 8px solid rgba(255, 255, 255, 0.3);
        border-top: 8px solid #fff;
        border-radius: 50%;
        width: 60px;
        height: 60px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }

    .k-table-thead {
        background-color: #4CAF50;
        color: white;
        font-weight: bold;
        text-align: center;
    }
</style>

<main>
    <div class="container">
        <div>
            <h2>PRODUCTS</h2>
            <div id="productGrid"></div>
        </div>

        <div class="nav">
            <ul>
                <li><button onclick="showProductForm()">New Product <i class="fa-solid fa-plus"></i></button></li>
            </ul>
        </div>

        <div class="overlay" id="overlay"></div>

        <div class="alert-overlay" id="alert-overlay"></div>
        <div class="alert-form">
            <p id="alertMessage">@TempData["ErrorMessage"]</p>
            <button class="okButton" onclick="hideAlertForm()">Hide</button>
        </div>

        <div id="loadingSpinner" class="spinner-overlay" style="display: none;">
            <div class="spinner"></div>
        </div>

        <!-- Form thêm Sản Phẩm -->
        <div class="customer-form" id="productForm" style="display: none;">
            <h3>PRODUCT</h3>
            <form id="createProductForm" method="post">
                <div class="form-group">
                    <label for="productName" class="bold">Product Name:</label>
                    <input type="text" id="productName" name="ProductName" required placeholder="Product name">
                </div>
                <div class="form-group">
                    <label for="price" class="bold">Price:</label>
                    <input type="number" id="price" name="Price" required placeholder="Product price" min="10000" max="100000000" title="Price must be between 10k and 100M">
                </div>
                <button type="submit">Create</button>
                <button type="button" onclick="hideProductForm()">Cancel</button>
            </form>
        </div>

        <!-- Form Cập Nhật Sản Phẩm -->
        <div class="customer-form" id="updateProductForm" style="display:none;">
            <h3>UPDATE PRODUCT</h3>
            <form id="updateProductForm" method="post">
                <div class="form-group">
                    <label class="bold">Product ID:</label>
                    <span id="displayProductID"></span>
                    <input type="hidden" id="updateProductID" name="ProductID" required>
                </div>
                <div class="form-group">
                    <label for="updateProductName" class="bold">Product Name:</label>
                    <input type="text" id="updateProductName" name="ProductName" required placeholder="Product name">
                </div>
                <div class="form-group">
                    <label for="updatePrice" class="bold">Price:</label>
                    <input type="number" id="updatePrice" name="Price" required placeholder="Product price" min="10000" max="100000000" title="Price must be between 10k and 100M">
                </div>
                <button type="submit">Update</button>
                <button type="button" onclick="hideUpdateProductForm()">Cancel</button>
            </form>
        </div>
    </div>
</main>

<script>
    $(document).ready(function () {
        // Kendo Grid for displaying products
        $("#productGrid").kendoGrid({
            dataSource: {
                data: @Html.Raw(Json.Serialize(Model)),
                schema: {
                    model: {
                        fields: {
                            productID: { type: "string" },
                            productName: { type: "string" },
                            price: { type: "number" }
                        }
                    }
                },
                pageSize: 5
            },
            height: 400,
            scrollable: true,
            sortable: true,
            pageable: {
                input: true,
                numeric: false
            },
            columns: [
                { field: "productID", title: "Product ID", width: "175px", attributes: { class: "attribute-table" } },
                { field: "productName", title: "Product Name", width: "200px", attributes: { class: "attribute-table" } },
                { field: "price", title: "Price (VND)", width: "200px", attributes: { class: "attribute-table" }, format: "{0:N0}" },
                { command: [{ text: "Edit", click: editProduct }, { text: "Delete", click: deleteProduct }], title: "Action", width: "250px" }
            ]
        });

        // Event cho form update product
        $("#updateProductForm").on("submit", function (e) {
            e.preventDefault();
            submitUpdateProductForm();
        });

        // Event cho form create product
        $("#createProductForm").on("submit", function (e) {
            e.preventDefault();
            submitCreateProductForm();
        });
    });

    function editProduct(e) {
        e.preventDefault();
        let dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        $("#displayProductID").text(dataItem.productID);
        $("#updateProductID").val(dataItem.productID);
        $("#updateProductName").val(dataItem.productName);
        $("#updatePrice").val(dataItem.price);
        $("#updateProductForm").show();
        $("#overlay").show();
    }

    // Hàm xử lý create và update product
        function submitCreateProductForm() {
           let productDataCrt = {
                    productName: $("#productName").val(),
                    price: $("#price").val()
                };

                $.ajax({
                    url: '/Product/Create',
                    type: 'POST',
                        data: productDataCrt,
                    success: function (response) {
                        if (response.success) {
                                hideProductForm();
                            showSpinner();
                        } else {
                                hideProductForm();
                            showAlert(response.message, false);
                        }
                    },
                    error: function () {
                        showAlert("An error occurred, please try again later.", false);
                    }
                });
        }

        function submitUpdateProductForm() {
                let productDataUpdt = {
                productID: $("#updateProductID").val(),
                productName: $("#updateProductName").val(),
                price: $("#updatePrice").val()
            };

            $.ajax({
                url: '/Product/Update',
                type: 'POST',
                data: productDataUpdt,
                success: function (response) {
                    if (response.success) {
                        hideUpdateProductForm();
                        showSpinner();
                    } else {
                        showAlert(response.message, false);
                    }
                },
                error: function () {
                    showAlert("An error occurred, please try again later.", false);
                }
            });
        }

   function deleteProduct(e) {
        e.preventDefault();
        let dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (confirm('Are you sure you want to delete this product?')) {
                $.ajax({
                    type: "POST",
                    url: '/Product/Delete',
                    data: { id: dataItem.productID },
                    success: function (response) {
                        if (response.success) {
                            showSpinner()
                        } else {
                            showAlert(response.message, false);
                        }
                    },
                    error: function () {
                        showAlert("An error occurred, please try again later.", false);
                    }
                });
            }
   }

    // Hàm show/hide form
    function showProductForm() {
        $("#productForm").show();
        $("#overlay").show();
    }

    function hideProductForm() {
        $("#productForm").hide();
        $("#overlay").hide();
    }

    function hideUpdateProductForm() {
        $("#updateProductForm").hide();
        $("#overlay").hide();
    }

        function showSpinner() {
                $("#loadingSpinner").show();

                setTimeout(function() {
                    window.location.reload();
                }, 800);
       }

        function hideAlertForm() {
            $("#alert-overlay").hide();
            $(".alert-form").hide();
            showSpinner();
        }

            // Function to display alerts
        function showAlert(message, isSuccess) {
            $("#alert-overlay").show();
            $(".alert-form").show();
            $("#alertMessage").text(message);
            $(".okButton").off().on("click", hideAlertForm);
        }
</script>
